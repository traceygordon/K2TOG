generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              Int              @id @default(autoincrement())
  name                            String           @db.VarChar(100)
  email                           String           @unique @db.VarChar(255)
  password                        String
  profile_pic                     String?
  location                        String?          @db.VarChar(100)
  created_at                      DateTime         @default(now())
  favorites                       Favorite[]
  finishedObjects                 FinishedObject[]
  listings                        Listing[]        @relation("SellerListings")
  messages                        Message[]        @relation("SenderMessages")
  buyerThreads                    MsgThread[]      @relation("BuyerThreads")
  sellerThreads                   MsgThread[]      @relation("SellerThreads")
  notions                         Notion[]
  ordersBought                    Order[]          @relation("BuyerOrders")
  ordersSold                      Order[]          @relation("SellerOrders")
  Rating_Rating_reviewee_idToUser Rating[]         @relation("Rating_reviewee_idToUser")
  Rating_Rating_reviewer_idToUser Rating[]         @relation("Rating_reviewer_idToUser")
  yarns                           Yarn[]
}

model Yarn {
  id            Int         @id @default(autoincrement())
  pictures      String[]
  brand         String?     @db.VarChar(100)
  amount        Int?
  length_yards  Int?        @map("length_yards")
  length_meters Int?        @map("length_meters")
  weight        String?     @db.VarChar(50)
  color         String?     @db.VarChar(100)
  composition   String?     @db.VarChar(50)
  quality       Quality?
  type          ActionType?
  price         Decimal?    @db.Decimal(10, 2)
  location      String?     @db.VarChar(100)
  needle_size   String?     @db.VarChar(25)
  hook_size     String?     @db.VarChar(25)
  user_id       Int?
  description   String?
  created_at    DateTime    @default(now())
  user          User?       @relation(fields: [user_id], references: [id])
}

model Notion {
  id          Int         @id @default(autoincrement())
  pictures    String[]
  name        String?     @db.VarChar(100)
  quantity    Int?
  quality     Quality?
  type        ActionType?
  price       Decimal?    @db.Decimal(10, 2)
  location    String?     @db.VarChar(100)
  user_id     Int?
  description String?
  created_at  DateTime    @default(now())
  user        User?       @relation(fields: [user_id], references: [id])
}

model FinishedObject {
  id          Int         @id @default(autoincrement())
  pictures    String[]
  name        String?     @db.VarChar(100)
  size        String?     @db.VarChar(50)
  quality     Quality?
  type        ActionType?
  price       Decimal?    @db.Decimal(10, 2)
  location    String?     @db.VarChar(100)
  user_id     Int?
  description String?
  created_at  DateTime    @default(now())
  user        User?       @relation(fields: [user_id], references: [id])
}

model Listing {
  id           Int             @id @default(autoincrement())
  seller_id    Int
  listing_type ListingCategory
  product_id   Int
  status       String          @default("available")
  created_at   DateTime        @default(now())
  favorites    Favorite[]
  seller       User            @relation("SellerListings", fields: [seller_id], references: [id])
  listingTags  ListingTag[]
  threads      MsgThread[]
  orders       Order[]
}

model MsgThread {
  id         Int       @id @default(autoincrement())
  buyer_id   Int
  seller_id  Int
  listing_id Int
  created_at DateTime  @default(now())
  messages   Message[]
  buyer      User      @relation("BuyerThreads", fields: [buyer_id], references: [id])
  listing    Listing   @relation(fields: [listing_id], references: [id])
  seller     User      @relation("SellerThreads", fields: [seller_id], references: [id])
}

model Message {
  id              Int       @id @default(autoincrement())
  conversation_id Int       @map("conversation_id")
  sender_id       Int       @map("sender_id")
  text            String
  created_at      DateTime  @default(now())
  conversation    MsgThread @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User      @relation("SenderMessages", fields: [sender_id], references: [id])
}

model Order {
  id          Int      @id @default(autoincrement())
  listing_id  Int
  buyer_id    Int
  seller_id   Int
  final_price Decimal  @db.Decimal(10, 2)
  created_at  DateTime @default(now())
  buyer       User     @relation("BuyerOrders", fields: [buyer_id], references: [id])
  listing     Listing  @relation(fields: [listing_id], references: [id])
  seller      User     @relation("SellerOrders", fields: [seller_id], references: [id])
  ratings     Rating[]
}

model Rating {
  id                            Int        @id @default(autoincrement())
  reviewer_id                   Int
  reviewee_id                   Int
  role                          RatingRole
  stars                         Int
  review                        String?
  order_id                      Int
  created_at                    DateTime   @default(now())
  order                         Order      @relation(fields: [order_id], references: [id])
  User_Rating_reviewee_idToUser User       @relation("Rating_reviewee_idToUser", fields: [reviewee_id], references: [id])
  User_Rating_reviewer_idToUser User       @relation("Rating_reviewer_idToUser", fields: [reviewer_id], references: [id])

  @@unique([reviewer_id, reviewee_id, order_id])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  listing_id Int
  created_at DateTime @default(now())
  listing    Listing  @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, listing_id])
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  listingTags ListingTag[]
}

model ListingTag {
  id         Int     @id @default(autoincrement())
  listing_id Int
  tag_id     Int
  listing    Listing @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([listing_id, tag_id])
}

enum ActionType {
  sell
  swap
  donate
}

enum ListingCategory {
  yarn
  notion
  finished_object
}

enum Quality {
  new        @map("new")
  good       @map("good")
  fair       @map("fair")
  well_loved @map("well-loved")
}

enum RatingRole {
  buyer
  seller
}
